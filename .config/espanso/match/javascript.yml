matches:

  # ARRAY METHODS

  - trigger: ",,jfi"
    replace: |
      const filteredArray = $|$.filter(item => {
        return condition;
      });

  - trigger: ",,jma"
    replace: |
      const newArray = $|$.map(item => {
        return item;
      });

  - trigger: ",,jrd"
    replace: |
      const result = $|$.reduce((accumulator, currentValue) => {
        return accumulator + currentValue;
      }, initialValue);

  # ASYNCHRONOUS OPERATIONS

  - trigger: ",,jas"
    replace: |
      async function $|$() {
        try {
          const result = await someAsyncOperation();
          console.log(result);
        } catch (error) {
          console.error(error);
        }
      }

  - trigger: ",,jfe"
    replace: |
      fetch('$|$')
        .then(response => response.json())
        .then(data => console.log(data))
        .catch(error => console.error('Error:', error));

  - trigger: ",,jpr"
    replace: |
      new Promise((resolve, reject) => {
        $|$
      });

  # CLASSES

  - trigger: ",,jcl"
    replace: |
      class $|$ {
        constructor() {

        }
      }

  # CONSOLE METHODS

  - trigger: ",,jce"
    replace: |
      console.error($|$)

  - trigger: ",,jcl"
    replace: |
      console.log($|$)

  - trigger: ",,jctm"
    replace: |
      console.time("$|$")

  - trigger: ",,jcte"
    replace: |
      console.timeEnd("$|$")

  # DOM MANIPULATION

  - trigger: ",,jae"
    replace: |
      window.addEventListener('$|$', eventHandler);

  - trigger: ",,jcf"
    replace: |
      document.createDocumentFragment("$|$")

  - trigger: ",,jev"
    replace: |
      const handler$|$ = e => {}
      window.addEventListener('event', handler);
      window.removeEventListener('event', handler);

  - trigger: ",,jgc"
    replace: |
      document.getElementByClassName("$|$")

  - trigger: ",,jgi"
    replace: |
      document.getElementById("$|$")

  - trigger: ",,jqa"
    replace: |
      document.querySelectorAll("$|$")

  - trigger: ",,jqs"
    replace: |
      document.querySelector("$|$")

  - trigger: ",,jre"
    replace: |
      window.removeEventListener('$|$', eventHandler);

  # FUNCTIONS AND ARROW FUNCTIONS

  - trigger: ",,jaf"
    replace: |
      const $|$ = () =>

  - trigger: ",,jfn"
    replace: |
      function $|$() { }

  # LOOPS

  - trigger: ",,jf+"
    replace: |
      for (let i = 0; i < $|$.length; i++){ }

  - trigger: ",,jf-"
    replace: |
      for (let i = 0; i >= 0; i--){ }

  - trigger: ",,jfi"
    replace: |
      for (let $|$ in ){ }

  - trigger: ",,jfo"
    replace: |
      for (let $|$ of ){ }

  - trigger: ",,jwl"
    replace: |
      while ($|$){ }

  # MISCELLANEOUS

  - trigger: ",,jda"
    replace: |
      const [$|$] = ;

  - trigger: ",,jdb"
    replace: |
      function debounce(func, delay) {
        let timeoutId;
        return function(...args) {
          clearTimeout(timeoutId);
          timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
      }

  - trigger: ",,jco"
    replace: |
      const {$|$} = ;

  - trigger: ",,jlg"
    replace: |
      const value = localStorage.getItem('$|$');

  - trigger: ",,jls"
    replace: |
      localStorage.setItem('$|$', value);

  - trigger: ",,jpe"
    replace: |
      process.exit("$|$")

  - trigger: ",,jpl"
    replace: |
      .then(console.log).catch(console.error)

  - trigger: ",,jsi"
    replace: |
      setInterval(() => {$|$}, interval)

  - trigger: ",,jss"
    replace: |
      JSON.stringify("$|$")

  - trigger: ",,jst"
    replace: |
      setTimeout(() => {$|$}, delay)

  - trigger: ",,jth"
    replace: |
      function throttle(func, limit) {
        let inThrottle;
        return function(...args) {
          if (!inThrottle) {
            func.apply(this, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
          }
        };
      }
