gui:
    # stuff relating to the UI
    windowSize: 'normal' # one of 'normal' | 'half' | 'full' default is 'normal'
    scrollHeight: 2 # how many lines you scroll by
    scrollPastBottom: true # enable scrolling past the bottom
    scrollOffMargin: 2 # how many lines to keep before/after the cursor when it reaches the top/bottom of the view; see 'Scroll-off Margin' section below
    scrollOffBehavior: 'margin' # one of 'margin' | 'jump'; see 'Scroll-off Margin' section below
    sidePanelWidth: 0.3333 # number from 0 to 1
    expandFocusedSidePanel: false
    mainPanelSplitMode: 'flexible' # one of 'horizontal' | 'flexible' | 'vertical'
    enlargedSideViewLocation: 'left' # one of 'left' | 'top'
    language: 'auto' # one of 'auto' | 'en' | 'zh-CN' | 'zh-TW' | 'pl' | 'nl' | 'ja' | 'ko' | 'ru'
    timeFormat: '02 Jan 06' # https://pkg.go.dev/time#Time.Format
    shortTimeFormat: '3:04PM'
    theme:
        activeBorderColor:
            - '#a6e3a1'
            - bold
        inactiveBorderColor:
            - '#a6adc8'
        optionsTextColor:
            - '#89b4fa'
        selectedLineBgColor:
            - '#313244'
        cherryPickedCommitBgColor:
            - '#45475a'
        cherryPickedCommitFgColor:
            - '#a6e3a1'
        unstagedChangesColor:
            - '#f38ba8'
        defaultFgColor:
            - '#cdd6f4'
        searchingActiveBorderColor:
            - '#f9e2af'
    commitLength:
        show: true
    mouseEvents: true
    skipDiscardChangeWarning: false
    skipStashWarning: true
    showFileTree: false # for rendering changes files in a tree format
    showRandomTip: false
    showListFooter: true # for seeing the '5 of 20' message in list panels
    showBranchCommitHash: false # show commit hashes alongside branch names
    showBottomLine: true # for hiding the bottom information line (unless it has important information to tell you)
    showPanelJumps: true # for showing the jump-to-panel keybindings as panel subtitles
    showCommandLog: false
    commandLogSize: 8
    showIcons: false # deprecated: use nerdFontsVersion instead
    nerdFontsVersion: "3" # nerd fonts version to use ("2" or "3"); empty means don't show nerd font icons
    showFileIcons: true # for hiding file icons in the file views
    splitDiff: 'auto' # one of 'auto' | 'always'
    skipRewordInEditorWarning: false # for skipping the confirmation before launching the reword editor
    border: 'rounded' # one of 'single' | 'double' | 'rounded' | 'hidden'
    animateExplosion: true # shows an explosion animation when nuking the working tree
    portraitMode: 'auto' # one of 'auto' | 'never' | 'always'
git:
    paging:
        colorArg: always
        pager: delta --paging=never
        useConfig: false
    commit:
        signOff: false
    merging:
        # only applicable to unix users
        manualCommit: false
        # extra args passed to `git merge`, e.g. --no-ff
        args: ''
    log:
        # one of date-order, author-date-order, topo-order or default.
        # topo-order makes it easier to read the git log graph, but commits may not
        # appear chronologically. See https://git-scm.com/docs/git-log#_commit_ordering
        order: 'topo-order'
        # one of always, never, when-maximised
        # this determines whether the git graph is rendered in the commits panel
        showGraph: 'when-maximised'
        # displays the whole git graph by default in the commits panel (equivalent to passing the `--all` argument to `git log`)
        showWholeGraph: false
    skipHookPrefix: WIP
    # The main branches. We colour commits green if they belong to one of these branches,
    # so that you can easily see which commits are unique to your branch (coloured in yellow)
    mainBranches: [master, main]
    autoFetch: true
    autoRefresh: true
    fetchAll: true # Pass --all flag when running git fetch. Set to false to fetch only origin (or the current branch's upstream remote if there is one)
    branchLogCmd: 'git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --'
    allBranchesLogCmd: 'git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium'
    overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
    disableForcePushing: false
    parseEmoji: false
os:
    edit: '"$EDITOR" {{filename}}' # see 'Configuring File Editing' section
    editAtLine: '"$EDITOR" {{filename}} +{{line}}'
    copyToClipboardCmd: '' # See 'Custom Command for Copying to Clipboard' section
    editPreset: '' # see 'Configuring File Editing' section
    editAtLineAndWait: ''
    open: ''
    openLink: ''
refresher:
    refreshInterval: 10 # File/submodule refresh interval in seconds. Auto-refresh can be disabled via option 'git.autoRefresh'.
    fetchInterval: 60 # Re-fetch interval in seconds. Auto-fetch can be disabled via option 'git.autoFetch'.
update:
    method: prompt # can be: prompt | background | never
    days: 2 # how often an update is checked for
confirmOnQuit: false
# determines whether hitting 'esc' will quit the application when there is nothing to cancel/close
quitOnTopLevelReturn: true
disableStartupPopups: true
notARepository: 'prompt' # one of: 'prompt' | 'create' | 'skip' | 'quit'
promptToReturnFromSubprocess: true # display confirmation when subprocess terminates

keybinding:
    universal:
        quit: 'q'
        quit-alt1: '<c-c>' # alternative/alias of quit
        return: '<esc>' # return to previous menu, will quit if there's nowhere to return
        quitWithoutChangingDirectory: 'Q'
        togglePanel: '<tab>' # goto the next panel
        prevItem: '<up>' # go one line up
        nextItem: '<down>' # go one line down
        prevItem-alt: 'k' # go one line up
        nextItem-alt: 'j' # go one line down
        prevPage: ',' # go to next page in list
        nextPage: '.' # go to previous page in list
        gotoTop: '<' # go to top of list
        gotoBottom: '>' # go to bottom of list
        scrollLeft: 'H' # scroll left within list view
        scrollRight: 'L' # scroll right within list view
        prevBlock: '<left>' # goto the previous block / panel
        nextBlock: '<right>' # goto the next block / panel
        prevBlock-alt: 'h' # goto the previous block / panel
        nextBlock-alt: 'l' # goto the next block / panel
        jumpToBlock: ['1', '2', '3', '4', '5'] # goto the Nth block / panel
        nextMatch: 'n'
        prevMatch: 'N'
        optionMenu: '' # show help menu
        optionMenu-alt1: '?' # show help menu
        select: '<space>'
        goInto: '<enter>'
        openRecentRepos: '<c-r>'
        confirm: '<enter>'
        remove: 'd'
        new: 'n'
        edit: 'e'
        openFile: 'o'
        scrollUpMain: '<pgup>' # main panel scroll up
        scrollDownMain: '<pgdown>' # main panel scroll down
        scrollUpMain-alt1: 'K' # main panel scroll up
        scrollDownMain-alt1: 'J' # main panel scroll down
        scrollUpMain-alt2: '<c-u>' # main panel scroll up
        scrollDownMain-alt2: '<c-d>' # main panel scroll down
        executeShellCommand: ':'
        createRebaseOptionsMenu: 'm'
        pushFiles: 'P'
        pullFiles: 'p'
        refresh: 'R'
        createPatchOptionsMenu: '<c-p>'
        nextTab: ']'
        prevTab: '['
        nextScreenMode: '+'
        prevScreenMode: '_'
        undo: 'u'
        redo: 'U'
        filteringMenu: '<c-s>'
        diffingMenu: 'W'
        diffingMenu-alt: '<c-e>' # deprecated
        copyToClipboard: '<c-o>'
        submitEditorText: '<enter>'
        extrasMenu: '@'
        toggleWhitespaceInDiffView: '<c-w>'
        increaseContextInDiffView: '}'
        decreaseContextInDiffView: '{'
        toggleRangeSelect: 'v'
        rangeSelectUp: '<s-up>'
        rangeSelectDown: '<s-down>'
    status:
        checkForUpdate: '<c-z>'
        recentRepos: '<enter>'
    files:
        commitChanges: 'c'
        commitChangesWithoutHook: 'w' # commit changes without pre-commit hook
        amendLastCommit: 'A'
        commitChangesWithEditor: 'C'
        findBaseCommitForFixup: '<c-f>'
        confirmDiscard: 'x'
        ignoreFile: 'i'
        refreshFiles: 'r'
        stashAllChanges: 's'
        viewStashOptions: 'S'
        toggleStagedAll: 'a' # stage/unstage all
        viewResetOptions: 'D'
        fetch: 'f'
        toggleTreeView: '`'
        openMergeTool: 'M'
        openStatusFilter: '<c-b>'
    branches:
        createPullRequest: 'o'
        viewPullRequestOptions: 'O'
        checkoutBranchByName: 'c'
        forceCheckoutBranch: 'F'
        rebaseBranch: 'r'
        renameBranch: 'R'
        mergeIntoCurrentBranch: 'M'
        viewGitFlowOptions: 'i'
        fastForward: 'f' # fast-forward this branch from its upstream
        createTag: 'T'
        pushTag: 'P'
        setUpstream: 'u' # set as upstream of checked-out branch
        fetchRemote: 'f'
    commits:
        squashDown: 's'
        renameCommit: 'r'
        renameCommitWithEditor: 'R'
        viewResetOptions: 'g'
        markCommitAsFixup: 'f'
        createFixupCommit: 'F' # create fixup commit for this commit
        squashAboveCommits: 'S'
        moveDownCommit: '<c-j>' # move commit down one
        moveUpCommit: '<c-k>' # move commit up one
        amendToCommit: 'A'
        pickCommit: 'p' # pick commit (when mid-rebase)
        revertCommit: 't'
        cherryPickCopy: 'c'
        pasteCommits: 'V'
        tagCommit: 'T'
        checkoutCommit: '<space>'
        resetCherryPick: '<c-R>'
        copyCommitMessageToClipboard: '<c-y>'
        openLogMenu: '<c-l>'
        viewBisectOptions: 'b'
    stash:
        popStash: 'g'
        renameStash: 'r'
    commitFiles:
        checkoutCommitFile: 'c'
    main:
        toggleSelectHunk: 'a'
        pickBothHunks: 'b'
    submodules:
        init: 'i'
        update: 'u'
        bulkMenu: 'b'

customCommands:

    - key: 'a'
      description: 'Toggle file staged'
      context: 'files'
      command: "git {{if .SelectedFile.HasUnstagedChanges}} add {{else}} reset {{end}} {{.SelectedFile.Name | quote}}"

    - key: '<c-f>'
      description: 'fetch a remote branch as a new local branch'
      command: "git fetch {{index .SelectedRemote.Name }} {{index .PromptResponses 0}}:{{index .PromptResponses 1}}"
      context: 'remotes'
      prompts:
        - type: 'input'
          title: 'Remote Branch Name'
          initialValue: ''
        - type: 'input'
          title: 'New Local Branch Name'
          initialValue: ''
      loadingText: 'fetching branch'

    - key: "G"
      description: "Prune local branches no longer on its remote; (G)one."
      command: |
        git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D $branch; done
      context: "localBranches"
      loadingText: "Pruning gone..."

    - key: "v"
      context: "localBranches"
      loadingText: "Checking out GitHub Pull Request..."
      command: "gh pr checkout {{.Form.PullRequestNumber}}"
      prompts:
        - type: "menuFromCommand"
          title: "Which PR do you want to check out?"
          key: "PullRequestNumber"
          command: >-
              gh pr list --json number,title,headRefName,updatedAt
              --template '{{`{{range .}}{{printf "#%v: %s - %s (%s)" .number .title .headRefName (timeago .updatedAt)}}{{end}}`}}'
          filter: '#(?P<number>[0-9]+): (?P<title>.+) - (?P<ref_name>[^ ]+).*'
          valueFormat: '{{.number}}'
          labelFormat: '{{"#" | black | bold}}{{.number | white | bold}} {{.title | yellow | bold}}{{" [" | black | bold}}{{.ref_name | green}}{{"]" | black | bold}}'

    - key: "<c-p>"
      description: "prune deleted remote branches"
      command: "git remote prune {{.SelectedRemote.Name}}"
      context: "remotes"
      loadingText: "Pruning..."

    - key: "b"
      description: "prune local branches that have been merged to master"
      command: "git branch --merged master | grep -v '^[ *]*master$' | xargs -r git branch -d"
      context: "localBranches"
      loadingText: "Pruning..."

    - key: '<c-c>'
      description: 'commit as non-default author'
      command: 'git commit -m "{{index .PromptResponses 0}}" --author="{{index .PromptResponses 1}} <{{index .PromptResponses 2}}>"'
      context: 'files'
      prompts:
        - type: 'input'
          title: 'Commit Message'
          initialValue: ''
        - type: 'input'
          title: 'Author Name'
          initialValue: ''
        - type: 'input'
          title: 'Email Address'
          initialValue: ''
      loadingText: 'commiting'

    - key: 'b'
      description: 'blame file at tree'
      command: 'tig blame -- {{.SelectedFile.Name}}'
      context: 'files'
      subprocess: yes
    - key: 'b'
      description: 'blame file at revision'
      command: 'tig blame {{.SelectedSubCommit.Sha}} -- {{.SelectedCommitFile.Name}}'
      context: 'commitFiles'
      subprocess: yes
    - key: 'B'
      description: 'blame file at tree'
      command: 'tig blame -- {{.SelectedCommitFile.Name}}'
      context: 'commitFiles'
      subprocess: yes
    - key: 't'
      description: 'tig commit (`t` again to browse files at revision)'
      command: 'tig show {{.SelectedSubCommit.Sha}}'
      context: 'subCommits'
      subprocess: yes
    - key: 't'
      description: 'tig branch (`t` again to browse files at revision)'
      command: 'tig show {{.SelectedLocalBranch.Name}}'
      context: 'localBranches'
      subprocess: yes
    - key: 't'
      description: 'tig branch (`t` again to browse files at revision)'
      command: 'tig show {{.SelectedRemoteBranch.RemoteName}}/{{.SelectedRemoteBranch.Name}}'
      context: 'remoteBranches'
      subprocess: yes
    - key: 't'
      description: 'tig file (history of commits affecting file)'
      command: 'tig {{.SelectedSubCommit.Sha}} -- {{.SelectedCommitFile.Name}}'
      context: 'commitFiles'
      subprocess: yes
    - key: 't'
      description: 'tig file (history of commits affecting file)'
      command: 'tig -- {{.SelectedFile.Name}}'
      context: 'files'
      subprocess: yes
