# Kakoune with Kakhis
# Author: jtrv

colorscheme catpuccin_mocha

source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
bundle-noload kak-bundle https://github.com/jdugan6240/kak-bundle

evaluate-commands %sh{ kak-lsp }
evaluate-commands %sh{ kak-tree-sitter -vvv -dks --init "$kak_session" }

source "%val{config}/lsp.kak"
source "%val{config}/catpuccin_mocha_tree_sitter_faces.kak"

################### DISPLAY ###################

set-option global ui_options terminal_assistant=none
set-option global scrolloff 1,3

# toggle relative line numbers with insert mode
provide-module "number_toggle_kak" %{
  bundle number-toggle.kak https://github.com/jtrv/number-toggle.kak %{
    require-module "number-toggle"
    set-option global number_toggle_params -hlcursor -cursor-separator 'â”¼'
  }
}

# rainbow delimiters + current scope
provide-module "kak_rainbower" %{
  bundle kak-rainbower https://github.com/jtrv/kak-rainbower
  bundle-install-hook kak-rainbower %{ g++ rc/rainbower.cpp -O2 -o rc/rainbower }
}

###################### UTILITY ######################

set-option global grepcmd 'rg --color=always --smart-case --with-filename --line-number --column'
require-module grep
alias global kg grep

# empty scratch buffer(s)
hook global BufCreate '\*scratch(-\d+)?\*' %{ execute-keys -draft '%<a-d>' }

# clipboard integration
# see https://discuss.kakoune.com/t/clipboard-integration-using-osc-52/1002/7
define-command push-clip -docstring "
  push kakoune's "" register to external clipboard
" %{ nop %sh{
  encoded=$(printf %s "$kak_main_reg_dquote" | base64 | tr -d '\n')
  printf "\033]52;;%s\a" "$encoded" >"/proc/$kak_client_pid/fd/0"
}}
define-command pull-clip -docstring '
  pull external clipboard into kakoune''s " register
' %{ set-register dquote %sh{ xclip -o clipboard -selection clipboard } }

hook -group clip global NormalKey 'y|d|c' %{ push-clip }
hook -group clip global KakBegin  '.*'    %{ pull-clip }
hook -group clip global FocusIn   '.*'    %{ pull-clip }

bundle active-window.kak https://github.com/greenfork/active-window.kak %{
  set-face global InactiveCursor default,rgba:5d5d5dFF
}

bundle auto-pairs.kak https://github.com/alexherbo2/auto-pairs.kak %{ enable-auto-pairs }

bundle colorcol https://github.com/SolitudeSF/colorcol
bundle-install-hook colorcol %{ nimble install colorcol }

bundle grep-expand.kak https://github.com/jtrv/grep-expand.kak

bundle indent.kak https://github.com/kirusfg/indent.kak %{
  set-indent global 2 false
}

bundle kak-ansi https://github.com/eraserhd/kak-ansi
bundle-install-hook kak-ansi %{ make }

bundle popup.kak https://github.com/enricozb/popup.kak
bundle-install-hook popup.kak %{
  cargo binstall -y kak-popup --git https://github.com/enricozb/popup.kak
  cargo clean
}

bundle-noload kak-tree-sitter https://git.sr.ht/~hadronized/kak-tree-sitter
bundle-install-hook kak-tree-sitter %{
  cargo binstall -y kak-tree-sitter ktsctl
  cargo clean
}

bundle kakoune-auto-percent https://github.com/delapouite/kakoune-auto-percent

bundle kakoune-boost https://github.com/krobelus/kakoune-boost

bundle-noload kakoune-lsp https://github.com/kakoune-lsp/kakoune-lsp
bundle-install-hook kakoune-lsp %{
  cargo install --path .
  cargo clean
}

bundle kakoune-state-save https://gitlab.com/Screwtapello/kakoune-state-save.git %{
  hook global KakBegin .* %{
    state-save-reg-load colon
    state-save-reg-load pipe
    state-save-reg-load slash
  }
  hook global KakEnd .* %{
    state-save-reg-save colon
    state-save-reg-save pipe
    state-save-reg-save slash
  }
}

bundle kakoune-text-objects https://github.com/Delapouite/kakoune-text-objects

bundle kakpipe https://github.com/jtrv/kakpipe %{
  require-module "kakpipe"
  complete-command kakpipe shell
}
bundle-install-hook kakpipe %{
  cargo binstall -y kakpipe --git https://github.com/jtrv/kakpipe
  cargo clean
}

bundle kakship https://github.com/eburghar/kakship %{
  require-module kakship
  kakship-enable
}
bundle-install-hook kakship %{
  cargo install --path .
  cargo clean
}

bundle-noload skyspell https://github.com/your-tools/skyspell %{
  cargo binstall -y skyspell_kak --git https://github.com/your-tools/skyspell
  cargo clean
}

bundle sudo-write.kak https://github.com/jtrv/sudo-write.kak %{
  alias global sw 'sudo-write'
  alias global swq 'sudo-write-quit'
}

###################### COMMANDS ######################

define-command kakpipe-alias -docstring "
 kakpipe-alias <command>: Forwards outputs of the command given as
 parameter to a new fifo buffer and highlights text based on ansi color codes
" -params 1.. %{
  kakpipe --scroll --rw -- %arg{@}
}
alias global : kakpipe-alias

define-command buffer-picker -docstring "
  buffer-picker: Opens buffer picker.
" %{
  prompt buffer: -buffer-completion %{
    buffer %val{text}
  }
}
map global goto b -docstring "buffer"   %{<a-;>: buffer-picker <ret>}

define-command bun -docstring "
  bun [<arguments>]: bun utility wrapper
  Launch bun with the given arguments inside kakoune
" -params 1.. %{
  kakpipe -n "bun %arg{@}" -S -V FORCE_COLOR=1 -- bun %arg{@}
}

define-command cargo -docstring "
  cargo [<arguments>]: cargo utility wrapper
  Launch cargo with the given arguments inside kakoune
" -params 1.. %{
  kakpipe -n "cargo %arg{@}" -S -- cargo --color=always %arg{@}
}

define-command cat -docstring "
  cat [<files>]: bat utility wrapper
  Print the files (or buffile) using bat
" -params 1.. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "kakpipe -n \"bat %val{buffile}\" -- bat --style=plain --color=always %val{buffile}"
  else
    echo "kakpipe \"bat %arg{@}\" -- bat --style=plain --color=always %arg{@}"
  fi
}}

define-command comment -docstring "(Un)Comment lines" %{
  try %{
    execute-keys _
    comment-block
  } catch comment-line
}

define-command docs -docstring "
  docs <docset> <args> : search for an api within a dedoc docset
" -params 2.. %{ evaluate-commands %sh{
  cols=$(echo "$kak_window_width - 8" | bc -q)
  if [ $# -eq 3 ]; then
    echo "kakpipe -n \"docs $@\" -- dedoc -c ss -i -o $3 -c $cols $1 $2"
  else
    echo "kakpipe -n \"docs $@\" -- dedoc -c ss -i -o 1 -c $cols $@"
  fi
}} -shell-script-candidates %{
  if [ $kak_token_to_complete = 0 ]; then
    dedoc ls -aln | choose 0 | sort
  else
    rg -No "\p{L}+\w+" "$kak_buffile" | sort -u
  fi
}

define-command delta -docstring "
  delta [<arguments>]: delta utility wrapper
  Launch delta with the given arguments inside kakoune
" -shell-completion -params 1.. %{
  kakpipe -- delta %arg{@};
}

define-command dic -docstring "
  dic <query>: dic utility wrapper
  Generate dictionary results for the given query inside kakoune
" -params 0..2 %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "kakpipe -- dic %val{selection}"
  else
    echo "kakpipe -- dic %arg{@}"
  fi
}}

define-command diff -docstring "
  diff [<arguments>]: diff utility wrapper
  Generate a diff with the given arguments
" -shell-completion -params 1.. %{
  kakpipe -- diff -u %arg{@}; set buffer filetype diff;
}

define-command difft -docstring "
  difft [<arguments>]: difftastic utility wrapper
  Generate a diff with difftastic and the given arguments
" -shell-completion -params 1.. %{
  kakpipe -- difft --width=%val{window_width} --color=always %arg{@};
}

define-command diff-buffers -docstring "
  diff-buffers <buffer-a> <buffer-b>: diff utility
  Generate a diff buffer between <buffer-a> and <buffer-b>
" -buffer-completion -override -params 2 %{ evaluate-commands %sh{
  file1=$(mktemp)
  file2=$(mktemp)
  echo "
    evaluate-commands -buffer '$1' write -force $file1
    evaluate-commands -buffer '$2' write -force $file2
    edit! -scratch *diff-buffers*
    set buffer filetype diff
    set-register | 'diff -u $file1 $file2 | \
      sd -n 1 -- ''-{3} /tmp.*?$'' ''--- $1'' | \
      sd -n 1 -- ''\+{3} /tmp.*?$'' ''+++ $2'';
      rm $file1 $file2'
    execute-keys !<ret>gk
  "
}}

define-command doc-grep -docstring "
  doc-grep <query>: grep kakoune and plugin docs
" -params .. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    grep_args="%val{selection}"
  else
    grep_args="%arg{@}"
  fi

  fd \
  --absolute-path \
    --exclude '*changelog*' \
    --search-path "$(dirname $(dirname $kak_runtime))" \
    --search-path "$XDG_DATA_HOME/kak/" \
    --extension=asciidoc |
      xargs echo "grep $grep_args"
}}

define-command file-picker -docstring "
  file-picker: Opens file picker.
" %{
  prompt file: -shell-script-candidates 'fd --type=file' %{
    edit %val{text}
  }
}

define-command global-picker -docstring 'global-picker: Opens global search picker.' %{
  # provides word completion
  prompt grep: -shell-script-candidates %{
    echo "write '$kak_response_fifo'" > "$kak_command_fifo"
    cat "$kak_response_fifo" | kak -f 's[\w-]{4,}<ret>y%<a-R>a<ret>'
  } %{
    grep %val{text}
  }
}
map global user / -docstring "search" %{<a-;>: global-picker <ret>}

define-command glow -docstring "
  glow [<files>]: glow utility wrapper
  Open a glow formatted view of the provided files
" -params 1.. %{
  kakpipe -n "glow %arg{@}" -- glow -s dark %arg{@};
} -menu -shell-script-candidates %{fd -e md}

define-command go -docstring "
  go [<arguments>]: go utility wrapper
  Launch go with the given arguments inside kakoune
" -params 1.. %{
  kakpipe -n "go %arg{@}" -S -- go %arg{@}
}

define-command grep-write -docstring "
  grep-write: pipes the current grep-buffer to grug -w and prints the results
" %{
  declare-option -hidden str grug_buf
  evaluate-commands -draft %{
    evaluate-commands %sh{
      echo "set-option buffer grug_buf '$(mktemp /tmp/grug_buf.XXX)'"
    }
    write -sync -force %opt{grug_buf}
    evaluate-commands %sh{
      cat "$kak_opt_grug_buf" | grug -w |
        xargs -I{} echo "echo -debug 'grug: {}'; echo -markup {Information} 'grug: {}';"
    }
  }
}

define-command grep-buffers -docstring "
  grep-buffers [<pattern>]: search for a pattern in all buffers
  If <pattern> is not specified, the content of the main selection is used
" -params .. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "grep -F %val{selection} %val{buflist}"
  else
    echo "grep %arg{@} %val{buflist}"
  fi
}}

define-command yo -docstring "
  yo <query>: aichat utility wrapper
  Query LLM and stream the response to a FIFO buffer
" -params 1.. %{
  kakpipe -w -- aichat %arg{@};
}
define-command yo-buffer -docstring "
  opens a *yo-prompt* buffer for writing prompts to pass to yo
" %{
  edit -scratch *yo-prompt*
  set-option buffer filetype yo-prompt
}
define-command yo-buffer-write -docstring "
  send the *yo-prompt* buffer to yo
" -hidden %{
  buffer *yo-prompt*
  execute-keys '%: yo %val{selection} <ret>'
}
hook global BufSetOption filetype=yo-prompt %{
  alias buffer write yo-buffer-write
  alias buffer w yo-buffer-write
}
hook global WinDisplay '\*aichat.*\*' %{
  alias buffer write yo-buffer-write
  alias buffer w yo-buffer-write
}

define-command how -docstring "
  how <query>: how utility wrapper
  Get an answer from one of the popular Q&A platforms
" -params 1.. %{
  kakpipe -- hors -a -n 2 -p never %arg{@};
}

define-command kan -docstring "
  kan <query>: man utility wrapper
  Either show a man-page or the --help text for the given query
" -params 0.. %{ evaluate-commands %sh{
  if [ $# -eq 0 ] && man -w "$kak_selection" > /dev/null; then
    echo "man \"$kak_selection\""
  elif [ $# -eq 0 ] && $("$kak_selection" --help > /dev/null || "$kak_selection" -h > /dev/null); then
    echo "kelp \"$kak_selection\""
  elif man -w "$*" > /dev/null; then
    echo "man \"$*\""
  elif "$*" --help > /dev/null || "$*" -h > /dev/null; then
    echo "kelp \"$*\""
  fi
}}

define-command kelp -docstring "
  kelp <command>: --help output utility
  Show the --help output for the given command inside kakoune
" -shell-completion -params 0.. %{ evaluate-commands %sh{
  if [ $# -eq 0 ] && "$kak_selection" --help > /dev/null; then
    echo "kakpipe -- \"$kak_selection\" --help"
  elif [ $# -eq 0 ] && "$kak_selection" -h > /dev/null; then
    echo "kakpipe -- \"$kak_selection\" -h"
  elif "$*" --help > /dev/null; then
    echo "kakpipe -- \"$*\" --help"
  elif "$*" -h > /dev/null; then
    echo "kakpipe -- \"$*\" -h"
  fi
}}

define-command math -docstring "
  math <expression>: qalc utility wrapper
  Replace the selection with the solution of the given expression where x=selection
" -params 0.. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    printf %s\\n "
    prompt 'expression:' -init 'x' %{
      execute-keys \"| xargs -I x qalc -t '%val{text}' <ret>\"
    }"
  else
    printf %s\\n "
      execute-keys \"| xargs -I x qalc -t '$*' <ret>\""
  fi
}}

define-command npm -docstring "
  npm [<arguments>]: npm utility wrapper
  Launch npm with the given parameters inside kakoune
" -params 1.. %{
  kakpipe -S -- npm %arg{@}
}

define-command pcsv -docstring "
  pcsv [<files>]: csv viewing utility
  Print the files (or buffile) using bat and columns
" -file-completion -params .. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "kakpipe -- pcsv %val{buffile}"
  else
    echo "kakpipe -- pcsv %arg{@}"
  fi
}}

define-command bgsh -docstring "
  bgsh [<commands>]: background shell utility
  execute one-off commands in the background
" -shell-completion -params .. %{ nop %sh{ $@ } }
alias global :: bgsh

define-command ptsv -docstring "
  pcsv [<files>]: tsv viewing utility
  Print the files (or buffile) using bat and columns
" -file-completion -params .. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "kakpipe -- ptsv %val{buffile}"
  else
    echo "kakpipe -- ptsv %arg{@}"
  fi
}}

define-command reader-mode -docstring "Enables settings for better reading" %{
  require-module "ui"
  nop rainbow-disable-window
  nop number-toggle-disable
  nop ui-trailing-spaces-disable
  nop ui-whitespaces-disable
  nop ui-wrap-disable
  map buffer normal d <c-d>
  map buffer normal u <c-u>
}
hook global WinDisplay '\*(delta|diff|difft|greeting|help|man|mdn|tldr).*\*' %{
  reader-mode
}

define-command rman -docstring "
  rman <query>: rusty-man utility wrapper
  show a rustdoc page for the given module
" -params 1 %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "kakpipe -n \"rman %val{selection}\" -- rusty-man --viewer=rich %val{selection}"
  else
    echo "kakpipe -n \"rman %arg{1}\" -- rusty-man --viewer=rich %arg{@}"
  fi
}}

define-command save-macro-as -docstring "
  save-macro-as <command-name>: define-command with macro register
" -params 1 %{
  define-command %arg{1} -override %{ execute-keys "%reg{@}" }
}

define-command set-filetype -docstring "prompt to set filetype" %{
  prompt filetype: -shell-script-candidates %{
      fd --base-directory "$kak_runtime/rc/filetype" -t f -x basename -s .kak {}
    } %{
      set buffer filetype %val{text}
  }
}

define-command rnd -docstring "
  rnd: go to a random line
" %{ evaluate-commands %sh{
    echo "execute-keys '$(shuf -i 1-$kak_buf_line_count)g'"
}}

define-command thes -docstring "
  thes <query>: thesauromatic utility wrapper
  Generate thesaurus results for the given query
" -params 0..2 %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "kakpipe -- thesauromatic %val{selection} | col %val{window_width}"
  else
    echo "kakpipe -- thesauromatic %arg{@} | col %val{window_width}"
  fi
}}

define-command tldr -docstring "
  tldr <command>: tldr utility wrapper
  Cheatsheet for the given command
" -shell-completion -params 0.. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo "kakpipe -- tldr --color=always %val{selection}"
  else
    echo "kakpipe -- tldr --color=always %arg{@}"
  fi
}}

define-command view-pdf -docstring "
  view-pdf [<pdf>]: View pdf with zathura.
" -params .. %{
  terminal devour zathura %arg{@}
} -menu -shell-script-candidates %{fd -e pdf}
alias global pdf view-pdf

define-command xargs -docstring "
  xargs [<arguments>]: xargs utility wrapper
  execute a command with each selection, selections are represented with {} as a placeholder
" %{
  prompt 'command:' %{
    execute-keys "| xargs -I {} %val{text} <ret>"
  }
}

define-command watchexec -docstring "
  watchexec [<args>] <command>: watchexec utility wrapper
  execute the given command when the current directory changes 
" -shell-completion -params 0.. %{
  kakpipe -- watchexec %arg{@}
}

define-command watchthis -docstring "
  watchexec [<args>] <command>: watchexec utility wrapper
  execute the given command when the current file changes 
" -shell-completion -params 0.. %{
  kakpipe -- watchexec --watch %val{buffile} %arg{@}
}

define-command zeal -docstring "
  zeal <docset:api> : search for an api within a zeal docset
" -params 0.. %{ evaluate-commands %sh{
  if [ $# -eq 0 ]; then
    echo '
      prompt -shell-script-candidates %{
        rg -No "\p{L}+\w+" "$kak_buffile" \
          | sort -u \
          | sed "s/^/$kak_opt_filetype:/"
      } \
      -init "%opt{filetype}:" \
      zeal %{ terminal devour zeal %val{text} }
    '
  else
    echo "terminal devour zeal $*"
  fi
}} -shell-script-candidates %{
  rg -No '\p{L}+\w+' "$kak_buffile" \
    | sort -u \
    | sed "s/^/$kak_opt_filetype:/"
}

###################### INSERT KEYS ######################

map global insert <c-v> -docstring "insert mode paste"   %{<esc>Pi}

###################### PROMPT KEYS ######################

map global prompt <c-n> <tab>   -docstring "next completion"
map global prompt <c-p> <s-tab> -docstring "previous completion"

map global prompt <a-.> -docstring "insert buffer directory"     '%sh{ dirname "$kak_buffile" }<a-!>/'
map global prompt <a-,> -docstring "insert git root directory"   '%sh{ git rev-parse --show-toplevel }<a-!>/'

###################### NORMAL KEYS ######################

# clear selections
map global normal <a-space> <a-,> -docstring "clear current (or nth) selection"
map global normal <a-esc> <a-,>   -docstring "clear current (or nth) selection"
map global normal <esc> ,         -docstring "clear multi-selection and keep (nth)"

# use w as a more ergonomic 'previous word'
map global normal w b         -docstring "select previous word"
map global normal W B         -docstring "extend previous word"
map global normal <a-w> <a-b> -docstring "select previous BIG-WORD"
map global normal <a-W> <a-B> -docstring "extend previous BIG-WORD"

# swap [] <a-[]>
map global normal '[' '<a-[>'     -docstring "select upto previous object end"
map global normal '<a-[>' '['     -docstring "select to previous object end"

map global normal ']' '<a-]>'     -docstring "select upto next object end"
map global normal '<a-]>' ']'     -docstring "select to next object end"

# select whole lines
map global normal J -docstring "select next line"       %{Jx}
map global normal K -docstring "select previous line"   %{Kx}

# make x/X inner and outer object selection
map global normal x     -docstring "select inner"   %{<a-i>}
map global normal X     -docstring "select outer"   %{<a-a>}

# select all matches
map global normal <a-x> -docstring "select all matches"   %{<a-*>%s<ret>)}

# select/add next match
map global normal v     -docstring "select next match"      %{<a-*>n}
map global normal <a-v> -docstring "deselect current sel"   %{<a-*><a-n>}
map global normal V     -docstring "add next match"         %{<a-*>N}
map global normal <a-V> -docstring "add previous match"     %{<a-*><a-N>}

# case insensitive search by default
map global normal /     -docstring "search"                      %{/(?i)}
map global normal <a-/> -docstring "search backwards"            %{<a-/>(?i)}
map global normal ?     -docstring "(extend) search"             %{?(?i)}
map global normal <a-?> -docstring "(extend) search backwards"   %{<a-?>(?i)}

# (Un)Comment Lines
map global normal <#> -docstring "comment"   %{: comment <ret>}

# new windows
map global normal <c-n> -docstring "new client"     %{: new <ret>}
map global normal +     -docstring "new popup"      %{: popup fish <ret>}

map global normal <c-p> -docstring "file-picker"    %{: file-picker <ret>}

# external programs

# TODO: yazi breaks in popup
#  map global normal <c-h> -docstring "yazi"      %{: popup yazi <ret>}
map global normal <c-v> -docstring "lazygit"   %{: popup lazygit <ret>}

################# MODES ##################

map global user <space> : -docstring "prompt"

map global user a -docstring "ansi" %{: ansi-enable <ret>}

# navigate buffers
bundle kakoune-buffers https://github.com/delapouite/kakoune-buffers %{
  hook global WinDisplay .* info-buffers
    map global normal b -docstring "buffers" %{: enter-buffers-mode <ret>}
    alias global bd  delete-buffer
    alias global bd! delete-buffer!
    alias global bf  buffer-first
    alias global bl  buffer-last
    alias global bo  buffer-only
    alias global bo! buffer-only-force
}

bundle kakoune-buffer-manager https://github.com/theowenyoung/kakoune-buffer-manager %{
  map global buffers e -docstring "buffer editor"   %{: buffer-manager <ret>}
}

bundle kakoune-cd https://github.com/delapouite/kakoune-cd %{
  map global user C -docstring "cd" %{: enter-user-mode cd <ret>}
  alias global cdb change-directory-current-buffer
  alias global cdr change-directory-project-root
  alias global ecd edit-current-buffer-directory
  alias global pwd print-working-directory
}

declare-user-mode case
  map global user c -docstring "case" %{: enter-user-mode case <ret>}
  map global case .  -docstring 'Sentence case'   %{<esc>| caser sentence <ret>}
  map global case a  -docstring 'Ada_Case'        %{<esc>| caser ada <ret>}
  map global case c  -docstring 'camelCase'       %{<esc>| caser camel <ret>}
  map global case i  -docstring "invert CASE"     %{<a-`>}
  map global case k  -docstring 'kebab-case'      %{<esc>| caser kebab <ret>}
  map global case l  -docstring "lowercase"       %{`}
  map global case p  -docstring 'PascalCase'      %{<esc>| caser pascal <ret>}
  map global case S  -docstring 'SCREAMING_CASE'  %{<esc>| caser screaming <ret>}
  map global case s  -docstring 'snake_case'      %{<esc>| caser snake <ret>}
  map global case T  -docstring 'Title Case'      %{<esc>| caser title <ret>}
  map global case t  -docstring 'Train-Case'      %{<esc>| caser train <ret>}
  map global case u  -docstring "UPPERCASE"       %{~}

declare-user-mode dev
  map global user d -docstring "dev" %{: enter-user-mode dev <ret>}
  map global dev f -docstring "format"       %{: format <ret>}
  map global dev F -docstring "format sel"   %{: format-selections <ret>}
  map global dev n -docstring "next lint"    %{: lint-next-message <ret>}
  map global dev p -docstring "prev lint"    %{: lint-previous-message <ret>}
  map global dev l -docstring "lint"         %{: lint <ret>}
  map global dev L -docstring "lint-buffer"  %{: buffer *lint-output* <ret>}
  map global dev s -docstring "set filetype" %{: set-filetype <ret>}


bundle kakoune-focus https://github.com/caksoylar/kakoune-focus %{
  map global user f -docstring "focus" %{: focus-toggle <ret>}
}

map global user i -docstring "dedoc" %{: docs %opt{filetype}<a-!>}

map global user l -docstring "lsp" %{: enter-user-mode lsp <ret>}
  map global lsp <minus> -docstring "disable"   %{: lsp-disable-window <ret>}
  map global lsp <plus>  -docstring "enable"    %{: lsp-enable-window <ret>}

map global user m -docstring "maths" %{: math <ret>}

# edit/extend/trim selections one by one
bundle kakoune-phantom-selection https://github.com/occivink/kakoune-phantom-selection %{
  declare-user-mode phantom
  map global user p -docstring "phantom" %{: enter-user-mode phantom <ret>}
  map global phantom a -docstring "add"        %{: phantom-selection-add-selection <ret>}
  map global phantom c -docstring "clear"      %{: phantom-selection-select-all; phantom-selection-clear <ret>}
  map global phantom n -docstring "next"       %{: phantom-selection-iterate-next <ret>}
  map global phantom p -docstring "previous"   %{: phantom-selection-iterate-prev <ret>}
}

# select/edit surrounding chars and tags
bundle kakoune-surround https://github.com/h-youhei/kakoune-surround %{
  declare-user-mode surround
  map global normal <'> -docstring "surround" %{: enter-user-mode surround <ret>}
  map global surround d -docstring "delete"              %{: delete-surround <ret>}
  map global surround i -docstring "insert"              %{: surround <ret>}
  map global surround r -docstring "replace"             %{: change-surround <ret>}
  map global surround s -docstring "select"              %{: select-surround <ret>}
  map global surround D -docstring "delete tag"          %{: delete-surrounding-tag <ret>}
  map global surround I -docstring "surround with tag"   %{: surround-with-tag <ret>}
  map global surround R -docstring "replace tag"         %{: change-surrounding-tag <ret>}
  map global surround S -docstring "select tag"          %{: select-surrounding-tag <ret>}
}

# spelling and grammar checking
declare-user-mode spell
  map global user s -docstring "spell" %{: enter-user-mode spell <ret>}
  map global spell e -docstring "enable"     %{: skyspell-enable en_US <ret>}
  map global spell d -docstring "disable"    %{: skyspell-disable <ret>}
  map global spell l -docstring "list"       %{: skyspell-list <ret>}
  map global spell n -docstring "next"       %{: skyspell-next <ret>}
  map global spell p -docstring "previous"   %{: skyspell-previous <ret>}
  map global spell r -docstring "replace"    %{: skyspell-replace <ret>}

provide-module "ui" %{
  bundle ui.kak https://github.com/kkga/ui.kak %{
    map global user u -docstring "ui" %{: enter-user-mode ui <ret>}
    set-option global ui_wrap_flags -width 100 -word -indent -marker ~~
    set-face global TrailingSpace default,red

    require-module "number_toggle_kak"
    define-command -override ui-line-numbers-toggle -docstring 'toggle line numbers' %{ number-toggle-toggle }
    define-command -override ui-line-numbers-enable -docstring 'enable line numbers' %{ number-toggle-enable }
    define-command -override ui-line-numbers-disable -docstring 'disable line numbers' %{ number-toggle-disable }

    declare-option -hidden bool colorcol_enabled false
    define-command ui-colorcol-enable %{
      evaluate-commands %sh{ $kak_opt_colorcol_enabled && echo "fail %{colorcol already enabled}" }
      colorcol-enable; colorcol-refresh-continuous;
      set-option buffer colorcol_enabled true
    }
    define-command ui-colorcol-disable %{
      colorcol-disable
      set-option buffer colorcol_enabled false
    }
    define-command ui-colorcol-toggle %{ try ui-colorcol-enable catch ui-colorcol-disable }
    map global ui r -docstring "toggle colorcol"   %{: ui-colorcol-toggle <ret>}

    define-command -override ui-lsp-enable %{
      set-option window lsp_auto_highlight_references true
      set-option window lsp_hover_anchor true
      lsp-auto-hover-enable
      lsp-auto-hover-insert-mode-enable
      lsp-inlay-diagnostics-enable window
      lsp-inlay-hints-enable window
      echo -debug "Enabling LSP for filtetype %opt{filetype}"
      lsp-enable-window
    }
    define-command ui-lsp-disable -override %{
      set-option window lsp_auto_highlight_references false
      set-option window lsp_hover_anchor false
      lsp-auto-hover-disable
      lsp-auto-hover-insert-mode-disable
      lsp-inlay-diagnostics-disable window
      lsp-inlay-hints-disable window
      lsp-disable-window
      echo -debug "Enabling LSP for filtetype %opt{filetype}"
    }
    define-command ui-lsp-toggle -override %{
      try ui-lsp-enable catch ui-lsp-disable
      trigger-user-hook ui-hl-changed
    }
    map global ui k -docstring "toggle kak-lsp"   %{: ui-lsp-toggle <ret>}

    require-module "kak_rainbower"
    declare-option -hidden bool rainbow_enabled false
    define-command ui-rainbow-enable %{
      evaluate-commands %sh{ $kak_opt_rainbow_enabled && echo "fail %{rainbow already enabled}" }
      rainbow-enable-window
      set-option buffer rainbow_enabled true
    }
    define-command ui-rainbow-disable %{
      rainbow-disable-window
      set-option buffer rainbow_enabled false
    }
    define-command ui-rainbow-toggle %{ try ui-rainbow-enable catch ui-rainbow-disable }
    map global ui R -docstring "toggle rainbow"   %{: ui-rainbow-toggle <ret>}

    # zdiff3 highlighting
    add-highlighter shared/zdiff3 group
    add-highlighter shared/zdiff3/HEAD   regex ^<{7}\s.*?$  0:rgb:ff0000,rgb:000000
    add-highlighter shared/zdiff3/PARENT regex ^\|{7}\s.*?$ 0:rgb:fff000,rgb:000000
    add-highlighter shared/zdiff3/MERGED regex ^={7}$       0:rgb:fff000,rgb:000000
    add-highlighter shared/zdiff3/CLOSE  regex ^>{7}\s.*?$  0:rgb:00ff00,rgb:000000
    add-highlighter shared/zdiff3/diff regions
    add-highlighter shared/zdiff3/diff/bg region ^<{7}\s ^>{7}\s fill default,rgb:000000

    define-command ui-zdiff3-enable %{ add-highlighter window/zdiff3 ref zdiff3 }
    define-command ui-zdiff3-disable %{ remove-highlighter window/zdiff3 }
    define-command ui-zdiff3-toggle %{ try ui-zdiff3-enable catch ui-zdiff3-disable }
    map global ui z -docstring "toggle zdiff3"   %{: ui-zdiff3-toggle <ret>}

    hook global WinCreate .* %{
      ui-git-diff-enable
      ui-lint-enable
      ui-rainbow-enable
      ui-todos-enable
      ui-zdiff3-enable
    }
    hook global BufSetOption filetype=* %{
      ui-trailing-spaces-enable
    }
  }
}
require-module "ui"

map global user v -docstring "view" 'v'

# write to file
map global user w -docstring "write" %{: write <ret>}

# pipe selections as args with xargs
map global user x -docstring "xargs" %{: xargs <ret>}

map global user y -docstring "yo" %{: yo-buffer <ret>}

map global user z -docstring "zeal" %{: zeal <ret>}

# contextual scripts
hook global WinSetOption filetype=git-commit           %{ source "~/.config/kak/contexts/commit.kak"      }
hook global WinSetOption filetype=(css|scss)           %{ source "~/.config/kak/contexts/css.kak"         }
hook global WinSetOption filetype=diff                 %{ source "~/.config/kak/contexts/diff.kak"        }
hook global WinSetOption filetype=fish                 %{ source "~/.config/kak/contexts/fish.kak"        }
hook global WinSetOption filetype=go                   %{ source "~/.config/kak/contexts/go.kak"          }
hook global WinSetOption filetype=grep                 %{ source "~/.config/kak/contexts/grep.kak"        }
hook global WinSetOption filetype=grep-expand          %{ source "~/.config/kak/contexts/grep-expand.kak" }
hook global WinSetOption filetype=html                 %{ source "~/.config/kak/contexts/html.kak"        }
hook global WinSetOption filetype=javascript           %{ source "~/.config/kak/contexts/javascript.kak"  }
hook global WinSetOption filetype=json                 %{ source "~/.config/kak/contexts/json.kak"        }
hook global WinSetOption filetype=latex                %{ source "~/.config/kak/contexts/latex.kak"       }
hook global WinSetOption filetype=markdown             %{ source "~/.config/kak/contexts/markdown.kak"    }
hook global WinSetOption filetype=python               %{ source "~/.config/kak/contexts/python.kak"      }
hook global WinSetOption filetype=e?ruby               %{ source "~/.config/kak/contexts/ruby.kak"        }
hook global WinSetOption filetype=rust                 %{ source "~/.config/kak/contexts/rust.kak"        }
hook global WinSetOption filetype=sh                   %{ source "~/.config/kak/contexts/sh.kak"          }
hook global WinSetOption filetype=terraform            %{ source "~/.config/kak/contexts/terraform.kak"   }
hook global WinSetOption filetype=typescript           %{ source "~/.config/kak/contexts/typescript.kak"  }
hook global WinSetOption filetype=toml                 %{ source "~/.config/kak/contexts/toml.kak"        }
hook global WinSetOption filetype=yaml                 %{ source "~/.config/kak/contexts/yaml.kak"        }

hook global WinCreate '\.env$'       %{ source "~/.config/kak/contexts/env.kak"    }
hook global WinCreate '.*?\.prisma$' %{ source "~/.config/kak/contexts/prisma.kak" }
